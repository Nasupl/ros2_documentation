# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Open Robotics
# This file is distributed under the same license as the ros2 documentation
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ros2 documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-22 13:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../source/Tutorials/Composition.rst:6
msgid "Composing multiple nodes in a single process"
msgstr ""

#: ../../source/Tutorials/Composition.rst:10
msgid "Table of Contents"
msgstr ""

#: ../../source/Tutorials/Composition.rst:13
msgid "Background"
msgstr ""

#: ../../source/Tutorials/Composition.rst:15
msgid "See the `conceptual article <../Concepts/About-Composition>`."
msgstr ""

#: ../../source/Tutorials/Composition.rst:18
msgid "Run the demos"
msgstr ""

#: ../../source/Tutorials/Composition.rst:20
msgid ""
"The demos use executables from `rclcpp_components "
"<https://github.com/ros2/rclcpp/tree/foxy/rclcpp_components>`__, "
"`ros2component "
"<https://github.com/ros2/ros2cli/tree/foxy/ros2component>`__, and  "
"`composition <https://github.com/ros2/demos/tree/foxy/composition>`__ "
"packages, and can be run with the following commands."
msgstr ""

#: ../../source/Tutorials/Composition.rst:24
msgid "Discover available components"
msgstr ""

#: ../../source/Tutorials/Composition.rst:26
msgid ""
"To see what components are registered and available in the workspace, "
"execute the following in a shell:"
msgstr ""

#: ../../source/Tutorials/Composition.rst:38
msgid ""
"Run-time composition using ROS services (1.) with a publisher and "
"subscriber"
msgstr ""

#: ../../source/Tutorials/Composition.rst:40
#: ../../source/Tutorials/Composition.rst:181
#: ../../source/Tutorials/Composition.rst:240
msgid "In the first shell, start the component container:"
msgstr ""

#: ../../source/Tutorials/Composition.rst:46
#: ../../source/Tutorials/Composition.rst:187
msgid "Verify that the container is running via ``ros2`` command line tools:"
msgstr ""

#: ../../source/Tutorials/Composition.rst:53
#: ../../source/Tutorials/Composition.rst:194
msgid ""
"In the second shell (see `talker "
"<https://github.com/ros2/demos/blob/foxy/composition/src/talker_component.cpp>`__"
" source code). The command will return the unique ID of the loaded "
"component as well as the node name."
msgstr ""

#: ../../source/Tutorials/Composition.rst:62
msgid ""
"Now the first shell should show a message that the component was loaded "
"as well as repeated message for publishing a message."
msgstr ""

#: ../../source/Tutorials/Composition.rst:64
msgid ""
"Another command in the second shell (see `listener "
"<https://github.com/ros2/demos/blob/foxy/composition/src/listener_component.cpp>`__"
" source code):"
msgstr ""

#: ../../source/Tutorials/Composition.rst:71
msgid ""
"The ``ros2`` command line utility can now be used to inspect the state of"
" the container:"
msgstr ""

#: ../../source/Tutorials/Composition.rst:81
msgid "Now the first shell should show repeated output for each received message."
msgstr ""

#: ../../source/Tutorials/Composition.rst:84
msgid "Run-time composition using ROS services (1.) with a server and client"
msgstr ""

#: ../../source/Tutorials/Composition.rst:86
msgid "The example with a server and a client is very similar."
msgstr ""

#: ../../source/Tutorials/Composition.rst:88
msgid "In the first shell:"
msgstr ""

#: ../../source/Tutorials/Composition.rst:95
msgid ""
"In the second shell (see `server "
"<https://github.com/ros2/demos/blob/foxy/composition/src/server_component.cpp>`__"
" and `client "
"<https://github.com/ros2/demos/blob/foxy/composition/src/client_component.cpp>`__"
" source code):"
msgstr ""

#: ../../source/Tutorials/Composition.rst:102
msgid ""
"In this case the client sends a request to the server, the server "
"processes the request and replies with a response, and the client prints "
"the received response."
msgstr ""

#: ../../source/Tutorials/Composition.rst:105
msgid "Compile-time composition using ROS services (2.)"
msgstr ""

#: ../../source/Tutorials/Composition.rst:107
msgid ""
"This demos shows that the same shared libraries can be reused to compile "
"a single executable running multiple components. The executable contains "
"all four components from above: talker and listener as well as server and"
" client."
msgstr ""

#: ../../source/Tutorials/Composition.rst:110
msgid ""
"In the shell call (see `source code "
"<https://github.com/ros2/demos/blob/foxy/composition/src/manual_composition.cpp>`__):"
msgstr ""

#: ../../source/Tutorials/Composition.rst:116
msgid ""
"This should show repeated messages from both pairs, the talker and the "
"listener as well as the server and the client."
msgstr ""

#: ../../source/Tutorials/Composition.rst:120
msgid ""
"Manually-composed components will not be reflected in the ``ros2 "
"component list`` command line tool output."
msgstr ""

#: ../../source/Tutorials/Composition.rst:123
msgid "Run-time composition using dlopen"
msgstr ""

#: ../../source/Tutorials/Composition.rst:125
msgid ""
"This demo presents an alternative to 1. by creating a generic container "
"process and explicitly passing the libraries to load without using ROS "
"interfaces. The process will open each library and create one instance of"
" each \"rclcpp::Node\" class in the library `source code "
"<https://github.com/ros2/demos/blob/foxy/composition/src/dlopen_composition.cpp>`__)."
msgstr ""

#: ../../source/Tutorials/Composition.rst:130
msgid "Linux"
msgstr ""

#: ../../source/Tutorials/Composition.rst:136
msgid "macOS"
msgstr ""

#: ../../source/Tutorials/Composition.rst:142
msgid "Windows"
msgstr ""

#: ../../source/Tutorials/Composition.rst:148
msgid "to get the path to where composition is installed. Then call"
msgstr ""

#: ../../source/Tutorials/Composition.rst:154
msgid ""
"Now the shell should show repeated output for each sent and received "
"message."
msgstr ""

#: ../../source/Tutorials/Composition.rst:158
msgid ""
"dlopen-composed components will not be reflected in the ``ros2 component "
"list`` command line tool output."
msgstr ""

#: ../../source/Tutorials/Composition.rst:162
msgid "Composition using launch actions"
msgstr ""

#: ../../source/Tutorials/Composition.rst:164
msgid ""
"While the command line tools are useful for debugging and diagnosing "
"component configurations, it is frequently more convenient to start a set"
" of components at the same time. To automate this action, we can use the "
"functionality in ``ros2 launch``."
msgstr ""

#: ../../source/Tutorials/Composition.rst:173
msgid "Advanced Topics"
msgstr ""

#: ../../source/Tutorials/Composition.rst:175
msgid ""
"Now that we have seen the basic operation of components, we can discuss a"
" few more advanced topics."
msgstr ""

#: ../../source/Tutorials/Composition.rst:179
msgid "Unloading components"
msgstr ""

#: ../../source/Tutorials/Composition.rst:204
msgid "Use the unique ID to unload the node from the component container."
msgstr ""

#: ../../source/Tutorials/Composition.rst:212
msgid ""
"In the first shell, verify that the repeated messages from talker and "
"listener have stopped."
msgstr ""

#: ../../source/Tutorials/Composition.rst:216
msgid "Remapping container name and namespace"
msgstr ""

#: ../../source/Tutorials/Composition.rst:218
msgid ""
"The component manager name and namespace can be remapped via standard "
"command line arguments:"
msgstr ""

#: ../../source/Tutorials/Composition.rst:224
msgid ""
"In a second shell, components can be loaded by using the updated "
"container name:"
msgstr ""

#: ../../source/Tutorials/Composition.rst:232
#: ../../source/Tutorials/Composition.rst:270
msgid "Namespace remappings of the container do not affect loaded components."
msgstr ""

#: ../../source/Tutorials/Composition.rst:236
msgid "Remap component names and namespaces"
msgstr ""

#: ../../source/Tutorials/Composition.rst:238
msgid ""
"Component names and namespaces may be adjusted via arguments to the load "
"command."
msgstr ""

#: ../../source/Tutorials/Composition.rst:247
msgid "Some examples of how to remap names and namespaces:"
msgstr ""

#: ../../source/Tutorials/Composition.rst:258
msgid "The corresponding entries appear in ``ros2 component list``:"
msgstr ""

#: ../../source/Tutorials/Composition.rst:273
msgid "Composable nodes as shared libraries"
msgstr ""

#: ../../source/Tutorials/Composition.rst:275
msgid ""
"If you want to export a composable node as a shared library from a "
"package and use that node in another package that does link-time "
"composition, add code to the CMake file which imports the actual targets "
"in downstream packages."
msgstr ""

#: ../../source/Tutorials/Composition.rst:277
msgid "Then install the generated file and export the generated file."
msgstr ""

#: ../../source/Tutorials/Composition.rst:279
msgid ""
"A practical example can be seen here: `ROS Discourse - Ament best "
"practice for sharing libraries <https://discourse.ros.org/t/ament-best-"
"practice-for-sharing-libraries/3602>`__"
msgstr ""

